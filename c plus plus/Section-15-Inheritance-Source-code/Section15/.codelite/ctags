_CHECKING_ACCOUNT_H_	D:\Section-15-Inheritance-Source-code\Section15\ChallengeSolution\Checking_Account.h	/^#define _CHECKING_ACCOUNT_H_$/;"	macro	line:2
Checking_Account	D:\Section-15-Inheritance-Source-code\Section15\ChallengeSolution\Checking_Account.h	/^class Checking_Account: public Account {$/;"	class	line:7	inherits:Account
operator <<	D:\Section-15-Inheritance-Source-code\Section15\ChallengeSolution\Checking_Account.h	/^    friend std::ostream &operator<<(std::ostream &os, const Checking_Account &account);$/;"	prototype	line:8	class:Checking_Account	access:friend	signature:(std::ostream &os, const Checking_Account &account)	returns:friend std :: ostream 
def_name	D:\Section-15-Inheritance-Source-code\Section15\ChallengeSolution\Checking_Account.h	/^    static constexpr const char *def_name = "Unnamed Checking Account";$/;"	member	line:10	class:Checking_Account	access:private
def_balance	D:\Section-15-Inheritance-Source-code\Section15\ChallengeSolution\Checking_Account.h	/^    static constexpr double def_balance = 0.0;$/;"	member	line:11	class:Checking_Account	access:private
per_check_fee	D:\Section-15-Inheritance-Source-code\Section15\ChallengeSolution\Checking_Account.h	/^    static constexpr double per_check_fee = 1.5;$/;"	member	line:12	class:Checking_Account	access:private
Checking_Account	D:\Section-15-Inheritance-Source-code\Section15\ChallengeSolution\Checking_Account.h	/^    Checking_Account(std::string name = def_name, double balance = def_balance);    $/;"	prototype	line:14	class:Checking_Account	access:public	signature:(std::string name = def_name, double balance = def_balance)
withdraw	D:\Section-15-Inheritance-Source-code\Section15\ChallengeSolution\Checking_Account.h	/^    bool withdraw(double);$/;"	prototype	line:15	class:Checking_Account	access:public	signature:(double)	returns:bool 
